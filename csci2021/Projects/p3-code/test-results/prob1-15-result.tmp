* (TEST 15) set_display_from_batt() 3.50 V
COMMENTS:
** program: ./test_batt_update "set_display_from_batt() 3.50 V"

** --- Failure messages --- 
- FAILURE(139) due to SIGSEGV (segmentation fault) from OS
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

** --- Side by Side Differences ---
- Expect output in: test-results/raw/prob1-15-expect.tmp
- Actual output in: test-results/raw/prob1-15-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
#+BEGIN_SRC sbs-diff
==== EXPECT ====                                                  ==== ACTUAL ====                                               
{                                                                 {
    // Set dispint from the given batt which is in Voltage mode       // Set dispint from the given batt which is in Voltage mode
    // and should result in a bit arrangement showing 3.50 V.         // and should result in a bit arrangement showing 3.50 V. 
    BATT_VOLTAGE_PORT = -1;                                           BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                           BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                           BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                                   batt_t batt = {
      .mlvolts = 3500,                                                  .mlvolts = 3500,
      .percent = 62,                                                    .percent = 62,
      .mode = 2,                                                        .mode = 2,
    };                                                                };
    int ret = set_display_from_batt(batt, dispint);                   int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                                          printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                                printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),                       "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));                                 "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");                      printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                                     BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                            printf("Display based on dispint:\n");
    print_batt_display();                                             print_batt_display();
}                                                                 }
---OUTPUT---                                                      ---OUTPUT---
ret: 0                                                          <
dispint bits       : 000 00111 1001111 1101101 0111111 110      <
index              :  29    24      17      10       3   0      <
                                                                <
BATT_VOLTAGE_PORT  : -1                                         <
BATT_STATUS_PORT   : 111 11111                                  <
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111      <
index              :  29    24      17      10       3   0      <
                                                                <
Display based on dispint:                                       <
+-^^^-+  ####   ####  ####                                      <
|     |     #   #     #  #                                      <
|     |     #   #     #  #                                      <
|#####|  ####   ####  #  #  V                                   <
|#####|     #      #  #  #                                      <
|#####|     #      #  #  #                                      <
+-----+  #### o ####  ####                                      <
#+END_SRC

** --- Line Differences ---
EXPECT:  23) ret: 0
EXPECT:  24) dispint bits       : 000 00111 1001111 1101101 0111111 110
EXPECT:  25) index              :  29    24      17      10       3   0
EXPECT:  26) 
EXPECT:  27) BATT_VOLTAGE_PORT  : -1
EXPECT:  28) BATT_STATUS_PORT   : 111 11111
EXPECT:  29) BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
EXPECT:  30) index              :  29    24      17      10       3   0
EXPECT:  31) 
EXPECT:  32) Display based on dispint:
EXPECT:  33) +-^^^-+  ####   ####  ####     
EXPECT:  34) |     |     #   #     #  #     
EXPECT:  35) |     |     #   #     #  #     
EXPECT:  36) |#####|  ####   ####  #  #  V  
EXPECT:  37) |#####|     #      #  #  #     
EXPECT:  38) |#####|     #      #  #  #     
EXPECT:  39) +-----+  #### o ####  ####     

--- Valgrind Log from: test-results/raw/prob1-15-valgrd.tmp ---
==6507== Memcheck, a memory error detector
==6507== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6507== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==6507== Command: ./test_batt_update set_display_from_batt()\ 3.50\ V
==6507== Parent PID: 6506
==6507== 
--6507-- WARNING: Serious error when reading debug info
--6507-- When reading debug info from /mnt/c/Users/gifte/Documents/projects/csci2021/Projects/p3-code/test_batt_update:
--6507-- Ignoring non-Dwarf2/3/4 block in .debug_info
--6507-- WARNING: Serious error when reading debug info
--6507-- When reading debug info from /mnt/c/Users/gifte/Documents/projects/csci2021/Projects/p3-code/test_batt_update:
--6507-- parse_CU_Header: is neither DWARF2 nor DWARF3 nor DWARF4
==6507== Invalid read of size 8
==6507==    at 0x10B970: ??? (batt_update_asm.s:104)
==6507==    by 0x487C082: (below main) (libc-start.c:308)
==6507==  Address 0x23e0dbc is not stack'd, malloc'd or (recently) free'd
==6507== 
==6507== 
==6507== Process terminating with default action of signal 11 (SIGSEGV)
==6507==  Access not within mapped region at address 0x23E0DBC
==6507==    at 0x10B970: ??? (batt_update_asm.s:104)
==6507==    by 0x487C082: (below main) (libc-start.c:308)
==6507==  If you believe this happened as a result of a stack
==6507==  overflow in your program's main thread (unlikely but
==6507==  possible), you can try to increase the size of the
==6507==  main thread stack using the --main-stacksize= flag.
==6507==  The main thread stack size used in this run was 8388608.
==6507== 
==6507== HEAP SUMMARY:
==6507==     in use at exit: 8 bytes in 2 blocks
==6507==   total heap usage: 2 allocs, 0 frees, 8 bytes allocated
==6507== 
==6507== 4 bytes in 1 blocks are still reachable in loss record 1 of 2
==6507==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==6507==    by 0x109373: main (test_batt_update.c:39)
==6507== 
==6507== 4 bytes in 1 blocks are still reachable in loss record 2 of 2
==6507==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==6507==    by 0x109384: main (test_batt_update.c:40)
==6507== 
==6507== LEAK SUMMARY:
==6507==    definitely lost: 0 bytes in 0 blocks
==6507==    indirectly lost: 0 bytes in 0 blocks
==6507==      possibly lost: 0 bytes in 0 blocks
==6507==    still reachable: 8 bytes in 2 blocks
==6507==         suppressed: 0 bytes in 0 blocks
==6507== 
==6507== For lists of detected and suppressed errors, rerun with: -s
==6507== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

