* (TEST 17) set_display_from_batt() 62 %
COMMENTS:
** program: ./test_batt_update "set_display_from_batt() 62 %"

** --- Failure messages --- 
- FAILURE(139) due to SIGSEGV (segmentation fault) from OS
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

** --- Side by Side Differences ---
- Expect output in: test-results/raw/prob1-17-expect.tmp
- Actual output in: test-results/raw/prob1-17-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
#+BEGIN_SRC sbs-diff
==== EXPECT ====                                             ==== ACTUAL ====                                          
{                                                            {
    // Percent mode, show 62 %                                   // Percent mode, show 62 %
    BATT_VOLTAGE_PORT = -1;                                      BATT_VOLTAGE_PORT = -1;
    BATT_STATUS_PORT  = -1;                                      BATT_STATUS_PORT  = -1;
    BATT_DISPLAY_PORT = -1;                                      BATT_DISPLAY_PORT = -1;
    batt_t batt = {                                              batt_t batt = {
      .mlvolts = 3500,                                             .mlvolts = 3500,
      .percent = 62,                                               .percent = 62,
      .mode = 1,                                                   .mode = 1,
    };                                                           };
    int ret = set_display_from_batt(batt, dispint);              int ret = set_display_from_batt(batt, dispint);
    printf("ret: %d\n",ret);                                     printf("ret: %d\n",ret);
    printf("%-18s : %s\n%-18s : %s\n",                           printf("%-18s : %s\n%-18s : %s\n",
           "dispint bits", bitstr(*dispint, INT_BITS),                  "dispint bits", bitstr(*dispint, INT_BITS),
           "index", bitstr_index(INT_BITS));                            "index", bitstr_index(INT_BITS));
    printf("\n");  print_ports();  printf("\n");                 printf("\n");  print_ports();  printf("\n");
    BATT_DISPLAY_PORT = *dispint;                                BATT_DISPLAY_PORT = *dispint;
    printf("Display based on dispint:\n");                       printf("Display based on dispint:\n");
    print_batt_display();                                        print_batt_display();
}                                                            }
---OUTPUT---                                                 ---OUTPUT---
ret: 0                                                     <
dispint bits       : 000 00111 0000000 1111101 1011011 001 <
index              :  29    24      17      10       3   0 <
                                                           <
BATT_VOLTAGE_PORT  : -1                                    <
BATT_STATUS_PORT   : 111 11111                             <
BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111 <
index              :  29    24      17      10       3   0 <
                                                           <
Display based on dispint:                                  <
+-^^^-+         ####  ####                                 <
|     |         #        #                                 <
|     |         #        #                                 <
|#####|         ####  ####                                 <
|#####|         #  #  #     %                              <
|#####|         #  #  #                                    <
+-----+         ####  ####                                 <
#+END_SRC

** --- Line Differences ---
EXPECT:  22) ret: 0
EXPECT:  23) dispint bits       : 000 00111 0000000 1111101 1011011 001
EXPECT:  24) index              :  29    24      17      10       3   0
EXPECT:  25) 
EXPECT:  26) BATT_VOLTAGE_PORT  : -1
EXPECT:  27) BATT_STATUS_PORT   : 111 11111
EXPECT:  28) BATT_DISPLAY_PORT  : 111 11111 1111111 1111111 1111111 111
EXPECT:  29) index              :  29    24      17      10       3   0
EXPECT:  30) 
EXPECT:  31) Display based on dispint:
EXPECT:  32) +-^^^-+         ####  ####     
EXPECT:  33) |     |         #        #     
EXPECT:  34) |     |         #        #     
EXPECT:  35) |#####|         ####  ####     
EXPECT:  36) |#####|         #  #  #     %  
EXPECT:  37) |#####|         #  #  #        
EXPECT:  38) +-----+         ####  ####     

--- Valgrind Log from: test-results/raw/prob1-17-valgrd.tmp ---
==650== Memcheck, a memory error detector
==650== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==650== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==650== Command: ./test_batt_update set_display_from_batt()\ 62\ %
==650== Parent PID: 649
==650== 
==650== Invalid read of size 4
==650==    at 0x10B971: ??? (batt_update_asm.s:106)
==650==    by 0x487C082: (below main) (libc-start.c:308)
==650==  Address 0x1e00000005 is not stack'd, malloc'd or (recently) free'd
==650== 
==650== 
==650== Process terminating with default action of signal 11 (SIGSEGV)
==650==  Access not within mapped region at address 0x1E00000005
==650==    at 0x10B971: ??? (batt_update_asm.s:106)
==650==    by 0x487C082: (below main) (libc-start.c:308)
==650==  If you believe this happened as a result of a stack
==650==  overflow in your program's main thread (unlikely but
==650==  possible), you can try to increase the size of the
==650==  main thread stack using the --main-stacksize= flag.
==650==  The main thread stack size used in this run was 8388608.
==650== 
==650== HEAP SUMMARY:
==650==     in use at exit: 8 bytes in 2 blocks
==650==   total heap usage: 2 allocs, 0 frees, 8 bytes allocated
==650== 
==650== 4 bytes in 1 blocks are still reachable in loss record 1 of 2
==650==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==650==    by 0x109373: main (test_batt_update.c:39)
==650== 
==650== 4 bytes in 1 blocks are still reachable in loss record 2 of 2
==650==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==650==    by 0x109384: main (test_batt_update.c:40)
==650== 
==650== LEAK SUMMARY:
==650==    definitely lost: 0 bytes in 0 blocks
==650==    indirectly lost: 0 bytes in 0 blocks
==650==      possibly lost: 0 bytes in 0 blocks
==650==    still reachable: 8 bytes in 2 blocks
==650==         suppressed: 0 bytes in 0 blocks
==650== 
==650== For lists of detected and suppressed errors, rerun with: -s
==650== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

